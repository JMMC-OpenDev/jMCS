/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.jmmc.jmcs.gui;

import fr.jmmc.jmcs.App;
import fr.jmmc.jmcs.data.ApplicationDataModel;
import fr.jmmc.jmcs.network.BrowserLauncher;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/**
 *
 * @author lafrasse
 */
public class DependenciesView extends javax.swing.JFrame implements HyperlinkListener {

    /** Creates new form DependenciesView */
    public DependenciesView() {
        initComponents();
        postInit();
    }

    private void postInit() {

        final ApplicationDataModel data = App.getJMcsApplicationDataModel();
        final String jMcsName = data.getProgramName();
        final String jmmcLogoURL = getClass().getResource(data.getCompanyLogoResourcePath()).toString();
        final String jmmcUrl = data.getMainWebPageURL();
        final String jmmcName = data.getShortCompanyName();
        final String jmmcLongName = data.getLegalCompanyName();
        final String jMcsUrl = data.getLinkValue();

        final StringBuilder generatedHtml = new StringBuilder(4096);
        generatedHtml.append("<html><head></head><body>");
        generatedHtml.append("<center><b>").append(jMcsName).append(" Acknowledgments</b></center><br/>");
        generatedHtml.append("<center><a href='").append(jmmcUrl).append("'><img src='").append(jmmcLogoURL).append("'/></a></center><br/><br/>");
        generatedHtml.append("<i>").append(App.getSharedApplicationDataModel().getProgramName()).append("</i>");
        generatedHtml.append(" make extensive use of the <a href = '").append(jMcsUrl).append("'>").append(jMcsName).append("</a> provided by the ").append(jmmcLongName).append(" (").append(jmmcName).append(").<br/><br/>");
        generatedHtml.append(jMcsName).append(" dependencies include:<br/>");
        // Generate a HTML string with each package informations
        final List<String> packagesInfo = data.getPackagesInfo();
        // For each package
        /* We have a step of 3 because each package has a name, a link and a description */
        for (int i = 0; i < packagesInfo.size(); i += 3) {
            String name = packagesInfo.get(i);
            String link = packagesInfo.get(i + 1);
            String description = packagesInfo.get(i + 2);

            // We check if there is a link
            if (link == null) {
                generatedHtml.append(name);
            } else {
                generatedHtml.append("<a href='").append(link).append("'>").append(name).append("</a>");
            }

            generatedHtml.append(" : <i>").append(description).append("</i><br/><br/>");
        }
        generatedHtml.append("</body></html>");

        // Set properties
        jEditorPane1.setEditable(false);
        jEditorPane1.setMargin(new Insets(5, 5, 5, 5));
        jEditorPane1.setContentType("text/html");
        jEditorPane1.setText(generatedHtml.toString());
        jEditorPane1.setCaretPosition(0);
        jEditorPane1.addHyperlinkListener(this);

        // Trap Escape key
        KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        // Trap command-W key
        KeyStroke metaWStroke = KeyStroke.getKeyStroke(MainMenuBar.getSystemCommandKey() + "W");

        // Close window on either strike
        ActionListener actionListener = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                setVisible(false);
            }
        };
        getRootPane().registerKeyboardAction(actionListener, escapeStroke, JComponent.WHEN_IN_FOCUSED_WINDOW);
        getRootPane().registerKeyboardAction(actionListener, metaWStroke, JComponent.WHEN_IN_FOCUSED_WINDOW);

        setPreferredSize(new Dimension(400, 600));
        pack();
        WindowCenterer.centerOnMainScreen(this);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("jMCS Dependencies");
        setAlwaysOnTop(true);

        jScrollPane1.setViewportView(jEditorPane1);

        // Window layout
        Container contentPane = getContentPane();
        contentPane.add(jScrollPane1, BorderLayout.CENTER);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new DependenciesView();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Handle URL link clicked in the JEditorPane.
     *
     * @param event the received event.
     */
    @Override
    public void hyperlinkUpdate(HyperlinkEvent event) {
        // When a link is clicked
        if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            // Get the clicked URL
            String clickedURL = event.getURL().toExternalForm();

            // Open the url in web browser
            BrowserLauncher.openURL(clickedURL);
        }
    }
}
