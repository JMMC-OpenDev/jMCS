#!/bin/bash
#*******************************************************************************
# JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
#*******************************************************************************
#   NAME 
#   mkfBuildDocIndex - Generate index.html to access module's documentation
# 
#   SYNOPSIS
#   mkfBuildDocIndex
#   This command must be called under the doc directory.
# 
#   DESCRIPTION
#   mkfBuildDocIndex generates one index.html file to access each installed
#   modules in the doc directory.
#
#   FILES
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS     
#

#
# signal trap (if any)

#This function returns the complete pathname of the file given in parameter
function getCfgFile
{
	#Path list
	path="../config $INTROOT/config $MCSROOT/config"
    for dir in $path
    do
        if [ -f "$dir/$1" ]
        then
            fullPath="$dir/$1"
            return
        fi
    done
    fullPath="NULL"
}

if [ $# != 1 ]
then
    echo "" >&2
    echo " ERROR:  mkfBuildDocIndex: $*" >&2
    echo " Usage:  mkfBuildDocIndex <DOCROOT>" >&2
    echo "" >&2
    exit 1
fi

# create two temporary files
TMPFILE=`mktemp -q /tmp/mkfBuildDocIndex.XXXXXX`
if [ $? -ne 0 ]; then
    echo "$0: Can't create temp file '$TMPFILE',
    exiting..."
    exit 1
fi
TMP2FILE=`mktemp -q /tmp/mkfBuildDocIndex.XXXXXX`
if [ $? -ne 0 ]; then
    echo "$0: Can't create temp file '$TMP2FILE',
    exiting..."
    exit 1
fi


# check if target directory does exist
DOCLOCATION=$1
if [ ! -d $DOCLOCATION ]; then
    echo "Can't find any doc directory. Go into a doc directory and run it
    again.";
    exit 1;
fi

# store AREALOCATION 
# (which should be .../MCS/, .../INTROOT or something like that)
AREALOCATION=${DOCLOCATION%/*/*/*}


# init xslt filenames
getCfgFile "mkfBuildDocIndex.xsl"
 if [ "$fullPath" = "NULL" ]
    then
        echo "XSL Transformation File For Modules Not Found"
        exit 1;
    fi
XSL4MODULES=$fullPath;

getCfgFile "mkfBuildDocIndex2.xsl"
 if [ "$fullPath" = "NULL" ]
    then
        echo "XSL Transformation File For Modules Not Found"
        exit 1;
    fi
XSL4INDEX2=$fullPath;


# first echo comment
echo "Processing doc from $DOCLOCATION for modules:";

# prepare html head for modules.html
echo -e "
<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">
<html>
    <head>
        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">
        <title>Modules List</title>
        <link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\">
    </head>
    <body>
    <!-- Do not edit this file. It was automatically generated using
    mkfBuildDocIndex -->
    |<a href="index2.html" target="module">HOME</a>|
    " > $TMPFILE;


# prepare html head for index2.html that contains the list of installed
# modules
echo -e "
<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">
<html>
    <head>
        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">
        <title>Modules List</title>
        <link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\">
    </head>
    <body>
    <!-- Do not edit this file. It was automatically generated using
    mkfBuildDocIndex -->
    <H1>List of installed modules:</H1>
    It represents the documentation of the modules installed under <I>$AREALOCATION</I> on $HOSTNAME
    <BR/>
    <BR/>
    <table border=\"1\">
    <thead>
        <tr><th>Package</th><th>Module</th><th>Description</th></tr>
    </thead>
    <tbody>" > $TMP2FILE;


# process html bodies
for longModName in $DOCLOCATION/*;
do
    # find modName and reject files ,CVS directory and mod dir without xml
    # desc file
    modName=${longModName##*/};
    if [ $modName == "CVS" ]; then 
        test; 
    elif [ ! -d $longModName ]; then 
        test;
    elif [ ! -f $longModName/moduleDescription.xml ]; then
        echo -e "$modName\t->[FAIL] Missing $longModName/moduleDescription.xml file";
    else
        # perform line for modules.html
        newLine=`xsltproc $XSL4MODULES $longModName/moduleDescription.xml`;
        if [ -z "$newLine" ] ; then
            echo -e "$modName\t->[FAIL] Can't add to modules.html";
        else
            #add only if index.html is present
            if [ -f  $longModName/api/html/index.html ]; then
                echo "       $newLine" >> $TMPFILE;
            else
                echo -e "$modName\t->[WARNING] Can't find module's index.html";
            fi
            
        fi

        # perform infos for index2.html
        newLine=`xsltproc $XSL4INDEX2 $longModName/moduleDescription.xml`;
        if [ -z "$newLine" ] ; then
            echo -e "$modName\t->[FAIL] Can't add to index2.html";
        else
            echo "       $newLine" >> $TMP2FILE;
        fi
    fi
done;

# append html foot
echo "   </body>
</html>" >> $TMPFILE;

# append html foot
echo "   
    </tbody>
    </table>
    <BR/>
    Generated on " >> $TMP2FILE;
   date >> $TMP2FILE; 
echo "   
    </body>
</html>" >> $TMP2FILE;

# output result
cat $TMPFILE > $DOCLOCATION/modules.html
cat $TMP2FILE > $DOCLOCATION/index2.html
rm -f $TMPFILE $TMP2FILE;

# create index.html with main area location into title
echo -e "
<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">
<html>
    <head>
        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=iso-8859-1\">
        <title>Modules List [$AREALOCATION]</title>
        <link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\">
    </head>
    <!-- Do not edit this file. It was automatically generated using
    mkfBuildDocIndex -->
    <NOFRAMES> Sorry we use frames:( . Please go to <a href=\"modules.html\">the modules page</a>. </NOFRAMES>
    <FRAMESET ROWS=\"50,*\">
    <FRAME NAME=\"modules\" SRC=\"modules.html\"/>
    <FRAME NAME=\"module\" SRC=\"index2.html\"/>
    </FRAMESET>
</html>" > $TMPFILE;
cat $TMPFILE > $DOCLOCATION/index.html
rm -f $TMPFILE
#___oOo___
