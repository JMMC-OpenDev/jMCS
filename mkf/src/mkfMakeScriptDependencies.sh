#! /bin/sh
#*******************************************************************************
# JMMC project
#
# "@(#) $Id: mkfMakeScriptDependencies.sh,v 1.2 2005-02-15 08:40:15 gzins Exp $" 
#
# History
# -------
# $Log: not supported by cvs2svn $
# gzins     26-Aug-2004  Adapted from VLT
#
#************************************************************************
#   NAME
#   mkfMakeScriptDependencies - create the makefile to build one script
# 
#   SYNOPSIS
#
#   mkfMakeScriptDependencies <scriptName>
# 
#   DESCRIPTION
#   Utility used by mkfMakefile to create the makefile to build one scripts.
#   It is not intended to be used as a standalone command.
#
#   Each ../bin-executable script depends on the source file:
#
#   ../bin/<scriptName>: <scriptName> Makefile
#   <TAB>   -$(AT) echo "== Making script: $(scriptName)"
#   <TAB>   -$(AT) mkfMakeScript $(scriptName)
#
#   The rule is written to standard output.
#
#   <scriptName>  The script to be treated
#
#
#   FILES
#   $MCSROOT/include/mkfMakefile.all  
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   SEE ALSO 
#   mkfMakefile.all, Makefile, (GNU) make
#
#   BUGS    
#
#----------------------------------------------------------------------

echo "SCRIPT NAME = $1"
if [ "${1}" != "" ]
then
    scriptName=$1
else
    echo "ERROR: mkfMakeScriptDependencies called with no parameters" >&2
    exit 1
fi

echo "# Dependency file for script: ${scriptName}"
echo "# Created automatically by mkfMakeScriptDependencies -  `date '+%d.%m.%y %T'`"
echo "# DO NOT EDIT THIS FILE"

#
# define the dependency file dependent to the Makefile
echo "../object/${scriptName}.ds: Makefile"
echo ""

#
# Shell programs (.sh) or python program (.py)
extList=".sh .py"
scriptFile=""
for ext in $extList
do 
    if [ -f ${scriptName}${ext} ]
    then
        scriptFile="${scriptName}${ext}"
    fi
done 
if [ "X$scriptFile" == "X" ]
then
    echo "ERROR: mkfMakeScriptDependencies - no source file found for script '${scriptName}'." >&2
    echo "A file named '${scriptName}[${extList}]' must exist in src directory" >&2
    exit 1
fi

#
# write on output the rule to build the script.
echo "../bin/${scriptName}: ${scriptFile} Makefile"
echo "	@echo \"== Making script: ../bin/${scriptName}\" "
echo "	\$(AT)mkfMakeScript ${scriptName} "
#
# ___oOo___
