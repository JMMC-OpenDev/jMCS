#*******************************************************************************
# JMMC project
#
# "@(#) $Id: mkfJavaMakefile,v 1.3 2005-02-15 08:49:27 gzins Exp $"
#
# History
# -------
# $Log: not supported by cvs2svn $
# gzins     26-Aug-2004  Adapted from VLT
#
#************************************************************************
#   NAME
#   mkfJavaMakefile - language specific Makefile
#
#   DESCRIPTION
#   The mkfJavaMakefile handles the targets to make, install and clean 
#   Java code (all files in the src directory of a software module 
#   with extension .java)
#
#   All the files .java are compiled calling the Java compiler. 
#   The resulting .class files are put in the ../object directory.
#   Afterwards, all the files .class existing in the ../object 
#   directory are combined in one or more  JAR archive files which are
#   created in the ../lib directory. 
#   
#   The "make install" will copy this jar file under the lib 
#   directory of the installation root (INTROOT, MCSROOT...)
#
#   The names of the jar files are determined by the user who will 
#   have to define in the module's Makefile the variable: 
#   JARFILES = <jjj1> <jjj2> .... (without extension .jar)
#   (name of the resulting jar files without extension)
#   plus corresponding directories in the form of
#   <jjj1>_DIRS = <dir11> <dir12> ... (space separated)
#   <jjj2>_DIRS = <dir21> <dir22> ...
# 
#   Additional non java files can be added specifying the directories they
#   are in, relative to the module src directory, in the following form:
#   <jjj1>_EXTRAS = images
#
#    or
#
#   <jjj2>_EXTRAS = sounds/rock/queen.au sounds/classic/Beethoven.au
#
#   Compiler options to the javac compiler can be passed by setting the
#   USER_JFLAGS.
#
#   CLASSPATH: is generated by a custom script. It takes the initial 
#   value of CLASSPATH from the shell and augments it with all jarfiles 
#   contained in <module>/lib, $INTROOT/lib and $MCSROOT/lib, in
#   that sequence. 
#
#   Java byte compiled code goes under <module>/object, possibly 
#   under a directory structure reflecting the Java package 
#   structure. Jarfiles are created, as specified in the JARFILES 
#   variable and moved to the lib directory.
#
#   The DEBUG flag can be set, to make original Java files to be appended
#   in the jarfile.
#
#   make clean deletes all *.class files from object 
#
#   FILES
#   mkfMakeJavaClasspath: Utility used by mkfMakefile to dynamically 
#   generate the CLASSPATH for Java stuff, prior to compilation. 
#   mkfMakeJavaDependencies: Utility used by mkfMakefile to create 
#   the makefile to build a Java Jarfile
#
#
#   ENVIRONMENT
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#   MCSROOT/include/mkfMakefile
#             MCS wide definitions for UNIX
#             This file includes the mkfJavaMakefile
#
#   BUGS
#
#------------------------------------------------------------------------
#
SHELL=/bin/ksh
######################################
# phony section
######################################
.PHONY : clean_jar
.PHONY : install_jar
.PHONY : do_jar
.PHONY : clean_java
.PHONY : install_java
.PHONY : do_java

######################################
# incrementing tasks
######################################
TMP_DEP_JAR := $(addprefix ../object/, $(addsuffix .djar, $(JARFILES)))

TMP_DEP_JAVA := $(addprefix ../object/, $(addsuffix .djava, $(JAVA_EXECUTABLES)))

ifneq ($(strip $(JARFILES)),)
    CLEAN_TARGET := $(CLEAN_TARGET) clean_jar
endif

ifneq ($(strip $(JARFILES)),)
    INSTALL_TARGET := $(INSTALL_TARGET) install_jar
endif

ifneq ($(strip $(JARFILES)),)
    ALL_TARGET := $(ALL_TARGET) do_jar
endif

ifneq ($(strip $(JAVA_EXECUTABLES)),)
    CLEAN_TARGET := $(CLEAN_TARGET) clean_java
endif

ifneq ($(strip $(JAVA_EXECUTABLES)),)
    INSTALL_TARGET := $(INSTALL_TARGET) install_java
endif

ifneq ($(strip $(JAVA_EXECUTABLES)),)
    ALL_TARGET := $(ALL_TARGET) do_java
endif

######################################
# targets specification
######################################

## install
##
install_jar:
ifneq ($(strip $(JARFILES)),)
	-@$(ECHO) "install_jar: jar_begin $(foreach member, $(JARFILES), $(LIB)/$(member).jar  )" >>$(FILE)
	-@$(ECHO) "jar_begin:" >>$(FILE)
	-@$(ECHO) "	-@echo \"\"; $(ECHO) \"......jarfiles:\"" >>$(FILE)
	-$(AT) for member in $(foreach name, $(JARFILES), $(name) ); \
		do \
		    $(ECHO) "$(LIB)/$${member}.jar: ../lib/$${member}.jar" >>$(FILE);\
		    $(ECHO) "	-\$$(AT)echo \"\t$${member}.jar\";\\" >>$(FILE);\
		    $(ECHO) "	cp ../lib/$${member}.jar $(LIB);\\" >>$(FILE);\
		    $(ECHO) "	chmod $(P644) $(LIB)/$${member}.jar" >>$(FILE);\
		done
endif

install_java:
ifneq ($(strip $(JAVA_EXECUTABLES)),)
	-@$(ECHO) "install_java: java_begin $(foreach member, $(JAVA_EXECUTABLES), $(BIN)/$(member) )" >>$(FILE)
	-@$(ECHO) "java_begin:" >>$(FILE)
	-@$(ECHO) "	-@echo \"\"; $(ECHO) \"......java programs:\"" >>$(FILE)
	-$(AT) for member in $(foreach name, $(JAVA_EXECUTABLES), $(name) ); \
		do \
		    $(ECHO) "$(BIN)/$${member}: ../bin/$${member}" >>$(FILE);\
		    $(ECHO) "	-\$$(AT)echo \"\t$${member}\";\\" >>$(FILE);\
		    $(ECHO) "	cp ../bin/$${member} $(BIN);\\" >>$(FILE);\
		    $(ECHO) "	chmod $(P755) $(BIN)/$${member}" >>$(FILE);\
		done
endif

##  clean
##
clean_jar:
	-$(AT)$(RM) mkfMake_clean_jar  $(foreach member,  $(JARFILES), ../lib/$(member).jar ../object/$(member).djar ../object/$(member) ) ../object/mkfMakeIndexFiles.del $(foreach member, $(JDIR), ../object/$(member) )   $(OUTPUT)
#	-$(AT)find ../object -type d ! -name object ! -name CVS | $(XARGS) -i $(RM) {}
#	-$(AT)find ../object -type f ! -name .cvsignore | $(XARGS) -i $(RM) {}
	-@$(ECHO) " .\c"

clean_java:
	-$(AT)$(RM) mkfMake_clean_java  $(foreach member,  $(JAVA_EXECUTABLES), ../bin/$(member) ../object/$(member).djava ../object/$(member) ) ../object/mkfMakeIndexFiles.del $(foreach member, $(JDIR), ../object/$(member) )   $(OUTPUT)
#	-$(AT)find ../object -type d ! -name object ! -name CVS | $(XARGS) -i $(RM) {}
#	-$(AT)find ../object -type f ! -name .cvsignore | $(XARGS) -i $(RM) {}
	-@$(ECHO) " .\c"


## all
##
# - for Automatic Dependencies for Jarfiles
#
../object/%.djar:
	- @echo "== Dependencies: $@"
	$(AT)mkfMakeJarDependencies $(*F) "$($(*F)_DIRS)" "$($(*F)_EXTRAS)" "$(USER_JFLAGS)" "$(DEBUG)" >../object/$*.djar

../object/%.djava:
	- @echo "== Dependencies: $@"
	$(AT)mkfMakeJavaDependencies $(*F) "$($(*F)_CLASS)" "$($(*F)_JAR)" >../object/$*.djava

do_jar:  do_names_check $(TMP_DEP_JAR)
	$(AT) for member in $(foreach name, $(JARFILES), $(name) ); \
		do \
		make -f ../object/$${member}.djar ../lib/$${member}.jar;\
		done

do_java:  do_names_check $(TMP_DEP_JAVA)
	$(AT) for member in $(foreach name, $(JAVA_EXECUTABLES), $(name) ); \
		do \
		make -f ../object/$${member}.djava ../bin/$${member};\
		done

#
# this ugly thing should not stay in here.
# It conceptually does not belong here.
# But for the time being it ain't any better place to go.
#
do_names_check:
ifneq ($(strip $(JARFILES)),)
ifneq ($(strip $(IDL_FILES)),)
	$(AT) for member in $(foreach name, $(JARFILES), $(name) ); \
	                do \
			  for idl  in $(foreach name, $(IDL_FILES), $(name) ); do \
	               if [ "$${member}" == "$${idl}" ]; then \
                            echo "** Name	clash between IDL_FILES and JARFILES  ($${member})\n" ; NAME_CLASH ; \
         fi \
         done; \
        done; 
endif
endif

