"------------------------------------------------------------------------------
" File:    $MCSROOT/etc/vimrc
"
" Version: $Id: gvimrc,v 1.4 2004-12-16 13:39:05 gzins Exp $
" 
" Purpose: VIM GUI special configuration file
"
" who       when        what
" --------  ----------  ----------------------------------------------
" gzins     14-05-2004  created
"------------------------------------------------------------------------------
" File:    $MCSROOT/etc/vimrc
"
" Version: $Id: gvimrc,v 1.4 2004-12-16 13:39:05 gzins Exp $
" 
" Purpose: VIM special configuration file
"
" who       when        what
" --------  ----------  ----------------------------------------------
" gzins     14-05-2004  created
" gzins     23-11-2004  added MCS types to the list of C-types keywords
" gzins     23-11-2004  added mcsTRUE and mcsFALSE to the list of C-types
"                       keywords
" gzins     23-11-2004  moved mcsTRUE and mcsFALSE to the list of C++-boolean
"                       keywords
" gzins     16-12-2004  added SUCCESS and FAILURE to the list of C++-boolean
"                       keywords
" gzins     16-12-2004  redifined mcsTRUE, mcsFALSE, SUCCESS and FAILURE as
"                       cConstant 
" 
" To use it, added the following line in ~/.vimrc 
"       source $MCSROOT/etc/vimrc
"
"------------------------------------------------------------------------------

set nocompatible    " Use Vim defaults (much better!)
set bs=2            " allow backspacing over everything in insert mode
set ai              " always set autoindenting on
set tw=78           " always limit the width of text to 78
set backup          " keep a backup file
set viminfo='20,\"50    " read/write a .viminfo file, don't store more
" than 50 lines of registers
set history=50      " keep 50 lines of command line history
set ruler           " show the cursor position all the time
" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")
" Don't use Ex mode, use Q for formatting
map Q gq

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78


    augroup cprog
        " Remove all cprog autocommands
        au!

        " When starting to edit a file:
        "   For C and C++ files set formatting of comments and set C-indenting on.
        "   For other files switch it off.
        "   Don't change the order, it's important that the line with * comes first.
        autocmd FileType *      set formatoptions=tcql nocindent comments&
        autocmd FileType c,cpp,C,h  set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
    augroup END

    augroup gzip
        " Remove all gzip autocommands
        au!

        " Enable editing of gzipped files
        " set binary mode before reading the file
        autocmd BufReadPre,FileReadPre    *.gz,*.bz2 set bin
        autocmd BufReadPost,FileReadPost  *.gz call GZIP_read("gunzip")
        autocmd BufReadPost,FileReadPost  *.bz2 call GZIP_read("bunzip2")
        autocmd BufWritePost,FileWritePost    *.gz call GZIP_write("gzip")
        autocmd BufWritePost,FileWritePost    *.bz2 call GZIP_write("bzip2")
        autocmd BufWritePost,FileWritePost    *.gz call GZIP_write("gzip")
        autocmd BufWritePost,FileWritePost    *.bz2 call GZIP_write("bzip2")
        autocmd FileAppendPre         *.gz call GZIP_appre("gunzip")
        autocmd FileAppendPre         *.bz2 call GZIP_appre("bunzip2")
        autocmd FileAppendPost        *.gz call GZIP_write("gzip")
        autocmd FileAppendPost        *.bz2 call GZIP_write("bzip2")

        " After reading compressed file: Uncompress text in buffer with "cmd"
        fun! GZIP_read(cmd)
            let ch_save = &ch
            set ch=2
            execute "'[,']!" . a:cmd
            set nobin
            let &ch = ch_save
            execute ":doautocmd BufReadPost " . expand("%:r")
        endfun

        " After writing compressed file: Compress written file with "cmd"
        fun! GZIP_write(cmd)
            if rename(expand("<afile>"), expand("<afile>:r")) == 0
                execute "!" . a:cmd . " <afile>:r"
            endif
        endfun
        " Before appending to compressed file: Uncompress file with "cmd"
        fun! GZIP_appre(cmd)
            execute "!" . a:cmd . " <afile>"
            call rename(expand("<afile>:r"), expand("<afile>"))
        endfun

    augroup END

    " This is disabled, because it changes the jumplist.  Can't use CTRL-O to go
    " back to positions in previous files more than once.
    if 0
        " When editing a file, always jump to the last cursor position.
        " This must be after the uncompress commands.
        autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
    endif
endif " has("autocmd")

set dictionary=/usr/share/dict/words

"   laststatus:  show status line?  Yes, always!
"   laststatus:  Even for only one buffer.
set laststatus=2

"   errorbells: damn this beep!  ;-)
set noerrorbells

"   Show cursor position
"   Yes !
set ruler

"   Short messages
"   just remove the intro message - option I
set   shortmess=I

"   visualbell:
"   Yes !
set   visualbell

"   Enable mouse operations
set mouse=a

"
" Naos customization
"
autocmd BufRead * let @z = expand("%:t:r")
set autowrite

"   expandtab:   expand tab to spaces
set expandtab

"   smarttab:   insert 'shiftwidth' in front of a line
set smarttab

"   tabstop:    Tab = 4 spaces
set tabstop=4

set shiftwidth=4

"   cinoptions: indentation options
set cinoptions=(0,g0

"   cindent:    allow C indentation
set cindent

"   complete:   how to complete words (from which buffer)
set complete=.,b,i

"   path:   The list of directories to search when you specify
"           a file with an edit command.
set path=.,./src,../src,./include,../include,$INTROOT,$INTROOT/src,$INTROOT/include,$MCSROOT/src,$MCSROOT/include,/usr/include

"   syntax: Added MCS types
autocmd BufRead *.c,*.C,*.h,*.cpp syn keyword cType mcsINT8 mcsUINT8 mcsINT16 mcsUINT16 mcsINT32 mcsUINT32 mcsLOGICAL mcsDOUBLE mcsFLOAT mcsBYTES4 mcsBYTES8 mcsBYTES12 mcsBYTES16 mcsBYTES20 mcsBYTES32 mcsBYTES48 mcsBYTES64 mcsBYTES80 mcsBYTES128 mcsBYTES256 mcsSTRING4 mcsSTRING8 mcsSTRING12 mcsSTRING16 mcsSTRING20 mcsSTRING32 mcsSTRING48 mcsSTRING64 mcsSTRING80 mcsSTRING128 mcsSTRING256 mcsCOMPL_STAT mcsPROCNAME mcsENVNAME mcsMODULEID mcsFILE_LINE mcsCMD
autocmd BufRead *.c,*.C,*.h,*.cpp syn keyword cConstant mcsTRUE mcsFALSE FAILURE SUCCESS
"
" 
" The commands in this are executed when the GUI is started.
" To use it, added the following line in ~/.gvimrc 
"       source $MCSROOT/etc/gvimrc
"
"------------------------------------------------------------------------------

" Make external commands work through a pipe instead of a pseudo-tty
"set noguipty

" set the X11 font to use
" set guifont=-misc-fixed-medium-r-normal--14-130-75-75-c-70-iso8859-1
"set guifont=Cour12

" Make command line two lines high
set ch=3

" Make shift-insert work like in Xterm
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" Only do this for Vim version 5.0 and later.
if version >= 500

  " I like highlighting strings inside C comments
  let c_comment_strings=1

  " Switch on syntax highlighting.
  syntax on

  " Switch on search pattern highlighting.
  set hlsearch

  " For Win32 version, have "K" lookup the keyword in a help file
  "if has("win32")
  "  let winhelpfile='windows.hlp'
  "  map K :execute "!start winhlp32 -k <cword> " . winhelpfile <CR>
  "endif

  " Hide the mouse pointer while typing
  set mousehide

  " Set nice colors
  " background for normal text is light grey
  " Text below the last line is darker grey
  " Cursor is green
  " Constants are not underlined but have a slightly lighter background
  highlight Normal guibg=grey90
  highlight Normal guifg=black
  highlight Cursor guibg=Green guifg=NONE
  highlight NonText guibg=grey80
  highlight Constant gui=NONE guibg=grey95
  highlight Special gui=NONE guibg=grey95
  highlight StatusLine gui=NONE guibg=orange guifg=white
  highlight Visual guibg=red guifg=pink
  highlight Question guifg=SeaGreen

endif

" Add menu item
amenu Edit.Delete\ Extra\ Spaces  :g/[  ]*$/s///g<CR>

" Comment/Uncomment C format
" set nohlsearch
amenu Edit.Comment\ region.C :'<,'>s/^.*$/\/* \0 *\//<CR>
amenu Edit.Uncomment\ region.C :'<,'>s/^\/\* \(.*\) \*\//\1/<CR>

" Comment/Uncomment C++ format
amenu Edit.Comment\ region.C++  :'<,'>s/^/\/\/ /<CR>
amenu Edit.Uncomment\ region.C++ :'<,'>s/^\/\/ //<CR>

" Comment/Uncomment Shell
amenu Edit.Comment\ region.Shell  :'<,'>s/^/# /<CR>
amenu Edit.Uncomment\ region.Shell :'<,'>s/^# //<CR>

set autowrite
set ignorecase
