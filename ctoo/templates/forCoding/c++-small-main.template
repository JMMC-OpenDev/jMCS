#%#-----------------------------------------------------------------------------
#%# JMMC project
#%# 
#%# "@(#) $Id: c++-small-main.template,v 1.16 2005-11-30 13:38:08 gzins Exp $"
#%# 
#%# Template for C++ small main program
#%# 
#%# History
#%# -------
#%# $Log: not supported by cvs2svn $
#%# Revision 1.15  2005/04/08 09:09:20  gluck
#%# Fix problem report 2: FAILURE -> mcsFAILURE
#%#
#%# Revision 1.14  2005/02/21 15:50:22  gluck
#%# Added automatic INSTITUTE replacement (from environment variable, by default JMMC if not set) instead of always JMMC, for project origin in file header
#%#
#%# Revision 1.13  2005/01/24 11:17:40  gluck
#%# Correct bug when add log message automatic insertion ($Log: not supported by cvs2svn $
#%# Correct bug when add log message automatic insertion (Revision 1.15  2005/04/08 09:09:20  gluck
#%# Correct bug when add log message automatic insertion (Fix problem report 2: FAILURE -> mcsFAILURE
#%# Correct bug when add log message automatic insertion (
#%# Correct bug when add log message automatic insertion (Revision 1.14  2005/02/21 15:50:22  gluck
#%# Correct bug when add log message automatic insertion (Added automatic INSTITUTE replacement (from environment variable, by default JMMC if not set) instead of always JMMC, for project origin in file header
#%# Correct bug when add log message automatic insertion ()
#%#
#%# Revision 1.12  2005/01/21 16:13:10  gluck
#%# - Correct alignment for generated files header from templates
#%# - Add log message automatic insertion ($Log)
#%#
#%# gluck      18-May-2004  Created
#%# 
#%# 
#%# This file has been prepared to be pre-processed by "getTemplate".
#%# If you are using it by hand, please:
#%#        - remove all lines starting with #%#
#%#        - delete ">-<" in "$I>-<d$"
#%# 
#%#-----------------------------------------------------------------------------
/*******************************************************************************
 * <INSTITUTE> project
 *
 * "@(#) $I>-<d$"
 *
 * History
 * -------
 * $>-Log-<$
 ******************************************************************************/

/**
 * @file
 * brief description of the program, which ends at this dot.
 *
 * @synopsis
 * \<Command Name\> [\e \<param1\> ... \e \<paramN\>] 
 *                     [\e \<option1\> ... \e \<optionN\>] 
 *
 * @param param1 : description of parameter 1, if it exists
 * @param paramN : description of parameter N, if it exists
 *
 * @opt
 * @optname option1 : description of option 1, if it exists
 * @optname optionN : description of option N, if it exists
 * 
 * @details
 * OPTIONAL detailed description of the c main file follows here.
 * 
 * @usedfiles
 * OPTIONAL. If files are used, for each one, name, and usage description.
 * @filename fileName1 :  usage description of fileName1
 * @filename fileName2 :  usage description of fileName2
 *
 * @env
 * OPTIONAL. If needed, environmental variables accessed by the program. For
 * each variable, name, and usage description, as below.
 * @envvar envVar1 :  usage description of envVar1
 * @envvar envVar2 :  usage description of envVar2
 * 
 * @warning OPTIONAL. Warning if any (software requirements, ...)
 *
 * @ex
 * OPTIONAL. Command example if needed
 * \n Brief example description.
 * @code
 * Insert your command example here
 * @endcode
 *
 * @sa OPTIONAL. See also section, in which you can refer other documented
 * entities. Doxygen will create the link automatically.
 * @sa <entity to refer>
 * 
 * @bug OPTIONAL. Known bugs list if it exists.
 * @bug Bug 1 : bug 1 description
 *
 * @todo OPTIONAL. Things to forsee list, if needed. 
 * @todo Action 1 : action 1 description
 * 
 */

static char *rcsId="@(#) $I>-<d$"; 
static void *use_rcsId = ((void)&use_rcsId,(void *) &rcsId);


/* 
 * System Headers 
 */
#include <stdlib.h>
#include <iostream>

/**
 * @namespace std
 * Export standard iostream objects (cin, cout,...).
 */
using namespace std;


/*
 * MCS Headers 
 */
#include "mcs.h"
#include "log.h"
#include "err.h"


/*
 * Local Headers 
 */
#include "<moduleName>.h"
#include "<moduleName>Private.h"


/*
 * Local Variables
 */

 

/* 
 * Signal catching functions  
 */



/* 
 * Main
 */

int main(int argc, char *argv[])
{
    // Initialize MCS services
    if (mcsInit(argv[0]) == mcsFAILURE)
    {
        // Error handling if necessary
        
        // Exit from the application with FAILURE
        exit (EXIT_FAILURE);
    }



    //
    // Insert your code here
    // 



    // Close MCS services
    mcsExit();
    
    // Exit from the application with SUCCESS
    exit (EXIT_SUCCESS);
}


/*___oOo___*/
